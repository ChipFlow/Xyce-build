name: Build Xyce on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_run:
    workflows: ["xyce-trigger"]
    types: [completed]

  workflow_dispatch:

jobs:
  build:
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MPI toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest MPI toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest MPI compiler toolchain on the default runner image, default generator>

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest-large, windows-latest-large, macos-latest-large] # windows-11-arm doesnt have working msys2 yet

    defaults:
      run:
        shell: ${{ contains(matrix.os, 'windows') && 'msys2 {0}' || 'bash {0}' }}
    env:
      MSYS2_PATH_TYPE: 'inherit'

    steps:
    - run: git config --global core.autocrlf false
      shell: bash

    - uses: actions/checkout@v4.2.2


    - name: Cache Homebrew Packages
      if: contains(matrix.os, 'macos')
      id: cache-homebrew-packages
      uses: actions/cache@v4
      env:
        cache-name: homebrew-packages
      with:
        path: $(brew --prefix)
        key: ${{ matrix.os }}-${{ env.cache-name }}-${{ hashFiles('build.sh') }}

    - name: Install MSYS2 dependencies
      uses: msys2/setup-msys2@v2
      if: contains(matrix.os, 'windows')
      with:
        msystem: UCRT64
        update: false
        release: false
        cache: true
        install: |
          autotools
          git
          bison
          flex
          patch
          bc
        pacboy: |
          toolchain
          autotools
          gcc
          cmake
          ccache
          make
          msmpi
          openblas
          lapack
          fftw
          suitesparse
          msmpi
          fc
          boost
          boost-libs
          python-numpy
          python

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2

    - name: Cache Sources
      id: cache-sources
      uses: actions/cache@v4
      with:
        path: _source
        key: ${{ runner.os }}-sources

    - name: Cache Trilinos build
      id: cache-trilinos
      uses: actions/cache@v4
      with:
        path: |
          _build_*/libs
          _b/libs
        key: ${{ runner.os }}-trilinos-${{ hashFiles('build.sh','scripts/*trilinos*', 'scripts/fetch-source.sh') }}


    - name: Fetch Source
      run: ./build.sh -s

    - name: Build Trilinos
      if: ${{ steps.cache-trilinos.outputs.cache-hit != 'true' && ! contains(matrix.os, 'windows') }}
      run: ./build.sh -t


    # Horrible things to reduce path length in build..
    - name: Build Trilinos for Windows
      if: ${{ steps.cache-trilinos.outputs.cache-hit != 'true' && contains(matrix.os, 'windows') }}
      shell: msys2 {0}
      working-directory: 'c:\a\'
      run: |
        mv $GITHUB_WORKSPACE /c/a/wb
        cd /c/a/wb && ./build.sh -t
        mv  /c/a/wb/* $GITHUB_WORKSPACE


    - name: Build rest
      run: ./build.sh -m -x -i

    - name: Run Regression
      run: ./build.sh -r
      continue-on-error: true

    - name: Upload installation as artifact
      uses: actions/upload-artifact@v4
      with:
        name: xyce-${{ matrix.os }}
        path: _install

    - name: Upload regression results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: xyce-regression-${{ matrix.os }}
        path: _build_*/Xyce-Regression


